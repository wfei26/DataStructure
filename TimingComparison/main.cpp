/********************************************************************************************
*Name: Wei Fei
*KUID: 2538810
*Date: 04/23/15
*File: main.cpp
*Course: EECS560 - Data Structure
*Project: Lab10 - Comparing the Performance Difference of Binomial queue, Leftist Heap and Skew Heap
*********************************************************************************************/

#include <iostream>
#include <cmath>
#include "Timer.h"
#include "LeftistHeapOperation.h"
#include "SkewHeapOperation.h"
#include "BinomialQueueOperation.h"

using namespace std;

int main()
{
	cout << "\nWelcome to use my program!" << endl;
	cout << "Testing begin." << endl;
	

	Timer myTimer;
	LeftistHeapOperation myLeftistHeap;
	SkewHeapOperation mySkewHeap;
	BinomialQueueOperation myBinomialQueue;
	int size = 50000;
	//create two arrays to store all randoms numbers generated by random seeds
	int* insertBuf, *operationBuf;

	while (size <= 400000)
	{
		cout << "\n==================================================================\n" << endl;
		//create four arrays to store the time of each round of insertion or operation of each heap
		double LeftistInsertionSUM = 0, LeftistOperationSUM = 0, SkewInsertionSUM = 0, SkewOperationSUM = 0, BinomialInsertionSUM = 0, BinomialOperationSUM = 0;
		double LeftistHeapInsertionTime[5], LeftistHeapOperationTime[5], SkewHeapInsertionTime[5], SkewHeapOperationTime[5], BinomialQueueInsertionTime[5], BinomialQueueOperationTime[5];
		insertBuf = 0;
		operationBuf = 0;
		for (int i = 0; i < 5; i++)
		{
			//initialize all arrays at the beginning of each iteration round
			LeftistHeapOperationTime[i] = 0;
			SkewHeapOperationTime[i] = 0;
			BinomialQueueOperationTime[i] = 0;
			insertBuf = new int[size];
			operationBuf = new int[size / 10];

			srand(size / ((int)pow(10, i)));
			for (int j = 0; j < size; j++)
			{
				insertBuf[j] = rand() % (4 * size);
			}
			for (int j = 0; j < (size / 10); j++)
			{
				operationBuf[j] = rand() % (4 * size);
			}

			double* decider = new double[size / 10];
			for (int j = 0; j < (size / 10); j++)
			{
				double temp;
				do
				{
					double tempNum2 = rand();
					double tempNum3 = rand();
					temp = tempNum2 / tempNum3;
				} while (temp < 0 || temp >= 1);
				decider[j] = temp;
			}
			/*
			for (int i = 0; i < (size / 10); i++)
			{
				decider[i] = (double)rand() / (double)RAND_MAX;
			}
			*/

			//Leftist Heap Insertion time
			myTimer.start();
			for (int j = 0; j < size; j++)
			{
				myLeftistHeap.insert(insertBuf[size]);
			}
			LeftistHeapInsertionTime[i] = myTimer.stop();

			//Leftist Heap Operation time
			myTimer.start();
			for (int j = 0; j < (size / 10); j++)
			{
				if (decider[j] < 0.5)
				{
					myLeftistHeap.deletemin();
				}
				else
				{
					myLeftistHeap.insert(operationBuf[j]);
				}
			}
			LeftistHeapOperationTime[i] = myTimer.stop();

			//Skew Heap Insertion time
			myTimer.start();
			for (int j = 0; j < size; j++)
			{
				mySkewHeap.insert(insertBuf[size]);
			}
			SkewHeapInsertionTime[i] = myTimer.stop();
		
			//Skew Heap Operation time
			myTimer.start();
			for (int j = 0; j < (size / 10); j++)
			{
				if (decider[j] < 0.5)
				{
					mySkewHeap.deletemin();
				}
				else
				{
					mySkewHeap.insert(operationBuf[j]);
				}
			}
			SkewHeapOperationTime[i] = myTimer.stop();

			//Binomial Queue Insertion time
			myTimer.start();
			for (int j = 0; j < size; j++)
			{
				myBinomialQueue.insert(insertBuf[size]);
			}
			BinomialQueueInsertionTime[i] = myTimer.stop();

			//Binomial Queue Operation time
			myTimer.start();
			for (int j = 0; j < (size / 10); j++)
			{
				if (decider[j] < 0.5)
				{
					myBinomialQueue.deletemin();
				}
				else
				{
					myBinomialQueue.insert(operationBuf[j]);
				}
			}
			BinomialQueueOperationTime[i] = myTimer.stop();

			delete[] decider;
			delete[] insertBuf;
			delete[] operationBuf;
		}

		for (int j = 0; j < 5; j++)
		{
			LeftistInsertionSUM = LeftistInsertionSUM + LeftistHeapInsertionTime[j];
			LeftistOperationSUM = LeftistOperationSUM + LeftistHeapOperationTime[j];
			SkewInsertionSUM = SkewInsertionSUM + SkewHeapInsertionTime[j];
			SkewOperationSUM = SkewOperationSUM + SkewHeapOperationTime[j];
			BinomialInsertionSUM = BinomialInsertionSUM + BinomialQueueInsertionTime[j];
			BinomialOperationSUM = BinomialOperationSUM + BinomialQueueOperationTime[j];
		}

		cout << "\n---------------------------------------------------------------------------" << endl;
		cout << "When size = " << size << endl;
		cout << "The average time of insertion time of Leftist Heap is " << LeftistInsertionSUM / 5.0 << " seconds" << endl;
		cout << "The average time of insertion time of Skew Heap is " << SkewInsertionSUM / 5.0 << " seconds" << endl;
		cout << endl;
		cout << "The average time of operation time of Leftist Heap is " << LeftistOperationSUM / 5.0 << " seconds" << endl;
		cout << "The average time of operation time of Skew Heap is " << SkewOperationSUM / 5.0 << " seconds" << endl;
		cout << endl;
		cout << "The average time of insertion time of Leftist Heap is " << BinomialInsertionSUM / 5.0 << " seconds" << endl;
		cout << "The average time of operation time of Skew Heap is " << BinomialOperationSUM / 5.0 << " seconds" << endl;
		size = size * 2;

	}

	
	system("pause");
	return 0;
}
